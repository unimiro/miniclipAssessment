import { InjectionToken, NgModule } from '@angular/core';
import { GaugeComponent } from './gauge.component';
import { GaugeDefaults } from './gauge-defaults.service';
import * as i0 from "@angular/core";
export const USER_DEFAULTS = new InjectionToken('gauge defaults');
class GaugeModule {
    static forRoot(userDefaults = {}) {
        return {
            ngModule: GaugeModule,
            providers: [
                {
                    provide: USER_DEFAULTS,
                    useValue: userDefaults,
                },
                {
                    provide: GaugeDefaults,
                    useFactory: (options) => {
                        const defaults = new GaugeDefaults();
                        Object.assign(defaults, options);
                        return defaults;
                    },
                    deps: [USER_DEFAULTS],
                },
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.1", ngImport: i0, type: GaugeModule, declarations: [GaugeComponent], exports: [GaugeComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: GaugeModule }); }
}
export { GaugeModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: GaugeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [GaugeComponent],
                    imports: [],
                    exports: [GaugeComponent],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1nYXVnZS9zcmMvbGliL2dhdWdlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sMEJBQTBCLENBQUM7O0FBRXZFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBMkIsSUFBSSxjQUFjLENBQ3JFLGdCQUFnQixDQUNqQixDQUFDO0FBRUYsTUFLYSxXQUFXO0lBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQ1osZUFBNkIsRUFBRTtRQUUvQixPQUFPO1lBQ0wsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxhQUFhO29CQUN0QixRQUFRLEVBQUUsWUFBWTtpQkFDdkI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFVBQVUsRUFBRSxDQUFDLE9BQXFCLEVBQUUsRUFBRTt3QkFDcEMsTUFBTSxRQUFRLEdBQWtCLElBQUksYUFBYSxFQUFFLENBQUM7d0JBQ3BELE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO3dCQUNqQyxPQUFPLFFBQVEsQ0FBQztvQkFDbEIsQ0FBQztvQkFDRCxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ3RCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs4R0F0QlUsV0FBVzsrR0FBWCxXQUFXLGlCQUpQLGNBQWMsYUFFbkIsY0FBYzsrR0FFYixXQUFXOztTQUFYLFdBQVc7MkZBQVgsV0FBVztrQkFMdkIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7b0JBQzlCLE9BQU8sRUFBRSxFQUFFO29CQUNYLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdhdWdlQ29tcG9uZW50IH0gZnJvbSAnLi9nYXVnZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgR2F1Z2VEZWZhdWx0cywgR2F1Z2VPcHRpb25zIH0gZnJvbSAnLi9nYXVnZS1kZWZhdWx0cy5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFVTRVJfREVGQVVMVFM6IEluamVjdGlvblRva2VuPHN0cmluZz4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdnYXVnZSBkZWZhdWx0cydcbik7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0dhdWdlQ29tcG9uZW50XSxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IFtHYXVnZUNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIEdhdWdlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoXG4gICAgdXNlckRlZmF1bHRzOiBHYXVnZU9wdGlvbnMgPSB7fVxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEdhdWdlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBHYXVnZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVVNFUl9ERUZBVUxUUyxcbiAgICAgICAgICB1c2VWYWx1ZTogdXNlckRlZmF1bHRzLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogR2F1Z2VEZWZhdWx0cyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiAob3B0aW9uczogR2F1Z2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0czogR2F1Z2VEZWZhdWx0cyA9IG5ldyBHYXVnZURlZmF1bHRzKCk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlcHM6IFtVU0VSX0RFRkFVTFRTXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19