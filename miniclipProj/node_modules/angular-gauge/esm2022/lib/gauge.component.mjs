import { Component, EventEmitter, Input, Output, } from '@angular/core';
import Gauge from 'svg-gauge';
import * as i0 from "@angular/core";
import * as i1 from "./gauge-defaults.service";
class GaugeComponent {
    constructor(elm, defaults) {
        this.elm = elm;
        this.defaults = defaults;
        /**
         * Called when the gauge is created
         */
        this.gaugeCreated = new EventEmitter();
    }
    ngAfterViewInit() {
        const options = {
            dialStartAngle: this.dialStartAngle,
            dialEndAngle: this.dialEndAngle,
            dialRadius: this.dialRadius,
            min: this.min,
            max: this.max,
            label: this.label,
            showValue: this.showValue,
            gaugeClass: this.gaugeClass,
            dialClass: this.dialClass,
            valueDialClass: this.valueDialClass,
            valueClass: this.valueClass,
            value: this.value,
            color: this.color,
        };
        Object.keys(this.defaults).forEach((optionKey) => {
            const key = optionKey;
            if (options[key] == null) {
                options[key] = this.defaults[key];
            }
        });
        Object.keys(options).forEach((optionKey) => {
            const key = optionKey;
            if (options[key] == null) {
                delete options[key];
            }
        });
        this.gauge = Gauge(this.elm.nativeElement, options);
        this.gaugeCreated.emit({ gauge: this.gauge });
        this.updateValue();
    }
    ngOnChanges(changes) {
        if (changes['value']) {
            this.updateValue();
        }
    }
    updateValue() {
        if (this.gauge) {
            if (this.animated) {
                this.gauge.setValueAnimated(this.value, this.animationDuration);
            }
            else {
                this.gauge.setValue(this.value);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: GaugeComponent, deps: [{ token: i0.ElementRef }, { token: i1.GaugeDefaults }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.1", type: GaugeComponent, selector: "mwl-gauge", inputs: { dialStartAngle: "dialStartAngle", dialEndAngle: "dialEndAngle", dialRadius: "dialRadius", min: "min", max: "max", label: "label", color: "color", showValue: "showValue", gaugeClass: "gaugeClass", dialClass: "dialClass", valueDialClass: "valueDialClass", valueClass: "valueClass", value: "value", animated: "animated", animationDuration: "animationDuration" }, outputs: { gaugeCreated: "gaugeCreated" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true }); }
}
export { GaugeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.1", ngImport: i0, type: GaugeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mwl-gauge',
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.GaugeDefaults }]; }, propDecorators: { dialStartAngle: [{
                type: Input
            }], dialEndAngle: [{
                type: Input
            }], dialRadius: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], label: [{
                type: Input
            }], color: [{
                type: Input
            }], showValue: [{
                type: Input
            }], gaugeClass: [{
                type: Input
            }], dialClass: [{
                type: Input
            }], valueDialClass: [{
                type: Input
            }], valueClass: [{
                type: Input
            }], value: [{
                type: Input
            }], animated: [{
                type: Input
            }], animationDuration: [{
                type: Input
            }], gaugeCreated: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1nYXVnZS9zcmMvbGliL2dhdWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUVULFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxHQUVQLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sS0FBSyxNQUFNLFdBQVcsQ0FBQzs7O0FBRTlCLE1BSWEsY0FBYztJQW1GekIsWUFBb0IsR0FBZSxFQUFVLFFBQXVCO1FBQWhELFFBQUcsR0FBSCxHQUFHLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFlO1FBUHBFOztXQUVHO1FBQ08saUJBQVksR0FBaUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUlILENBQUM7SUFFeEUsZUFBZTtRQUNiLE1BQU0sT0FBTyxHQUFpQjtZQUM1QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUMvQyxNQUFNLEdBQUcsR0FBRyxTQUErQixDQUFDO1lBQzVDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFRLENBQUM7YUFDMUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsU0FBK0IsQ0FBQztZQUM1QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQ3hCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRU8sV0FBVztRQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUNqRTtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7U0FDRjtJQUNILENBQUM7OEdBeklVLGNBQWM7a0dBQWQsY0FBYyxtZUFGZixFQUFFOztTQUVELGNBQWM7MkZBQWQsY0FBYztrQkFKMUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7NkhBS1UsY0FBYztzQkFBdEIsS0FBSztnQkFLRyxZQUFZO3NCQUFwQixLQUFLO2dCQUtHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBS0csR0FBRztzQkFBWCxLQUFLO2dCQUtHLEdBQUc7c0JBQVgsS0FBSztnQkFLRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0csS0FBSztzQkFBYixLQUFLO2dCQUtHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLRyxTQUFTO3NCQUFqQixLQUFLO2dCQUtHLGNBQWM7c0JBQXRCLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0csUUFBUTtzQkFBaEIsS0FBSztnQkFLRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBS0ksWUFBWTtzQkFBckIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2F1Z2VEZWZhdWx0cywgR2F1Z2VPcHRpb25zIH0gZnJvbSAnLi9nYXVnZS1kZWZhdWx0cy5zZXJ2aWNlJztcbmltcG9ydCBHYXVnZSBmcm9tICdzdmctZ2F1Z2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtd2wtZ2F1Z2UnLFxuICB0ZW1wbGF0ZTogJycsXG59KVxuZXhwb3J0IGNsYXNzIEdhdWdlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBHYXVnZU9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gc3RhcnQgdGhlIGRpYWxcbiAgICovXG4gIEBJbnB1dCgpIGRpYWxTdGFydEFuZ2xlITogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgYW5nbGUgaW4gZGVncmVlcyB0byBlbmQgdGhlIGRpYWwuIFRoaXMgTVVTVCBiZSBsZXNzIHRoYW4gZGlhbFN0YXJ0QW5nbGVcbiAgICovXG4gIEBJbnB1dCgpIGRpYWxFbmRBbmdsZSE6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHJhZGl1cyBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIEBJbnB1dCgpIGRpYWxSYWRpdXMhOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIHZhbHVlIGZvciB0aGUgZ2F1Z2VcbiAgICovXG4gIEBJbnB1dCgpIG1pbiE6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gdmFsdWUgZm9yIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgbWF4ITogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgbGFiZWwgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBjZW50ZXIuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsITogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nIGNvbG9yIHZhbHVlIGZvciB0aGUgZ2F1Z2UnJ3MgZmlsbCAodmFsdWUgZGlhbClcbiAgICovXG4gIEBJbnB1dCgpIGNvbG9yITogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSB2YWx1ZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBnYXVnZVxuICAgKi9cbiAgQElucHV0KCkgc2hvd1ZhbHVlITogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIEBJbnB1dCgpIGdhdWdlQ2xhc3MhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhlIGdhdWdlJ3MgZGlhbFxuICAgKi9cbiAgQElucHV0KCkgZGlhbENsYXNzITogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIGZpbGwgKHZhbHVlIGRpYWwpXG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZURpYWxDbGFzcyE6IHN0cmluZztcblxuICAvKipcbiAgICogXHRUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIHRleHRcbiAgICovXG4gIEBJbnB1dCgpIHZhbHVlQ2xhc3MhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZ2F1Z2VcbiAgICovXG4gIEBJbnB1dCgpIHZhbHVlITogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFuaW1hdGUgY2hhbmdpbmcgdGhlIGdhdWdlXG4gICAqL1xuICBASW5wdXQoKSBhbmltYXRlZCE6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFuaW1hdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAqL1xuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiE6IG51bWJlcjtcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGdhdWdlIGlzIGNyZWF0ZWRcbiAgICovXG4gIEBPdXRwdXQoKSBnYXVnZUNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjx7IGdhdWdlOiBhbnkgfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSBnYXVnZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxtOiBFbGVtZW50UmVmLCBwcml2YXRlIGRlZmF1bHRzOiBHYXVnZURlZmF1bHRzKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBvcHRpb25zOiBHYXVnZU9wdGlvbnMgPSB7XG4gICAgICBkaWFsU3RhcnRBbmdsZTogdGhpcy5kaWFsU3RhcnRBbmdsZSxcbiAgICAgIGRpYWxFbmRBbmdsZTogdGhpcy5kaWFsRW5kQW5nbGUsXG4gICAgICBkaWFsUmFkaXVzOiB0aGlzLmRpYWxSYWRpdXMsXG4gICAgICBtaW46IHRoaXMubWluLFxuICAgICAgbWF4OiB0aGlzLm1heCxcbiAgICAgIGxhYmVsOiB0aGlzLmxhYmVsLFxuICAgICAgc2hvd1ZhbHVlOiB0aGlzLnNob3dWYWx1ZSxcbiAgICAgIGdhdWdlQ2xhc3M6IHRoaXMuZ2F1Z2VDbGFzcyxcbiAgICAgIGRpYWxDbGFzczogdGhpcy5kaWFsQ2xhc3MsXG4gICAgICB2YWx1ZURpYWxDbGFzczogdGhpcy52YWx1ZURpYWxDbGFzcyxcbiAgICAgIHZhbHVlQ2xhc3M6IHRoaXMudmFsdWVDbGFzcyxcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgfTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuZGVmYXVsdHMpLmZvckVhY2goKG9wdGlvbktleSkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gb3B0aW9uS2V5IGFzIGtleW9mIEdhdWdlT3B0aW9ucztcbiAgICAgIGlmIChvcHRpb25zW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zW2tleV0gPSB0aGlzLmRlZmF1bHRzW2tleV0gYXMgYW55O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCgob3B0aW9uS2V5KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBvcHRpb25LZXkgYXMga2V5b2YgR2F1Z2VPcHRpb25zO1xuICAgICAgaWYgKG9wdGlvbnNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmdhdWdlID0gR2F1Z2UodGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmdhdWdlQ3JlYXRlZC5lbWl0KHsgZ2F1Z2U6IHRoaXMuZ2F1Z2UgfSk7XG5cbiAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXNbJ3ZhbHVlJ10pIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVZhbHVlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdhdWdlKSB7XG4gICAgICBpZiAodGhpcy5hbmltYXRlZCkge1xuICAgICAgICB0aGlzLmdhdWdlLnNldFZhbHVlQW5pbWF0ZWQodGhpcy52YWx1ZSwgdGhpcy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdhdWdlLnNldFZhbHVlKHRoaXMudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19